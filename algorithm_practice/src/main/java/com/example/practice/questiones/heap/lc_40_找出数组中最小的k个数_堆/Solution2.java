package com.example.practice.questiones.heap.lc_40_找出数组中最小的k个数_堆;

import java.util.PriorityQueue;
import java.util.Queue;

@SuppressWarnings("ConstantConditions")
public class Solution2 {
    //////////////////////////////
    //////////////////////////////
    //////////////////////////////
    //////////////////////////////
    //////////////////////////////
    //////////////////////////////
    //////////////////////////////
    //////////////////////////////
    //////////////////////////////
    //////////////////////////////
    //////////////////////////////
    //////////////////////////////
    //////////////////////////////
    //////////////////////////////
    //////////////////////////////
    //////////////////////////////
    //////////////////////////////
    //////////////////////////////
    //////////////////////////////
    //////////////////////////////
    //////////////////////////////
    //////////////////////////////
    //////////////////////////////
    //////////////////////////////
    //////////////////////////////
    //////////////////////////////
    //////////////////////////////
    //////////////////////////////
    //////////////////////////////
    //////////////////////////////
    //////////////////////////////
    //////////////////////////////
    //////////////////////////////
    //////////////////////////////
    public int[] getLeastNumbers(int[] arr, int k) {
        if (k == 0 || arr.length == 0) return new int[0];
        Queue<Integer> queue = new PriorityQueue<>();
        for (int num : arr) {
            queue.offer(num);
        }
        int[] res = new int[k];
        for (int i = 0; i < k; i++) {
            res[i] = queue.poll();
        }
        return res;
    }
    //////////////////////////////
    //////////////////////////////
    //////////////////////////////
    //////////////////////////////
    //////////////////////////////
    //////////////////////////////
    //////////////////////////////
    //////////////////////////////
    //////////////////////////////
    //////////////////////////////
    //////////////////////////////
    //////////////////////////////
    //////////////////////////////
    //////////////////////////////
    //////////////////////////////
    //////////////////////////////


}
