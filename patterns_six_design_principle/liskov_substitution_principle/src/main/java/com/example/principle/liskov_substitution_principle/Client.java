package com.example.principle.liskov_substitution_principle;

/**
 * 里氏替换原则
 * <p>
 * 定义看上去比较抽象，我们重新解释一下，可以理解为一个软件实体如果适
 * 用于一个父类，则一定适用于其子类，所有引用父类的地方必须能透明地使用其
 * 子类的对象，子类对象能够替换父类对象，而程序逻辑不变。
 * <p>
 * 也可以理解为，子类可以扩展父类的功能，但不能改变父类原有的功能。
 * <p>
 * 根据这个理解，我们对里氏替换原则的定义总结如下。
 * （1）子类可以实现父类的抽象方法，但不能覆盖父类的非抽象方法。
 * （2）子类中可以增加自己特有的方法。
 * （3）当子类的方法重载父类的方法时，方法的前置条件（即方法的输入参数）要比父类的方法更宽松。
 * （4）当子类的方法实现父类的方法时（重写/重载或实现抽象方法），方法的后置条件（即方法的输出/返回值）要比父类的方法更严格或相等。
 */
public class Client {
    public static void main(String[] args) {

    }
}
