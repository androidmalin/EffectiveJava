package polymorphism.shape;


/**
 * 产生正确的行为
 * 一旦知道Java中所有方法都是通过动态绑定实现多态这个事实之后，我们就
 * 可以编写只与基类打交道的程序代码了，并且这些代码对所有的导出类都可以正
 * 确运行。
 * <p>
 * 或者换一种说法，发送消息给某个对象，让该对象去断定应该做什么事。
 * <p>
 * 面向对象程序设计中，有一个经典的例子就是"几何形状"(shape)。
 * <p>
 * 因为它很直观，所以经常用到；但不幸的是，它可能使初学者认为面向对象程序设计
 * 仅适用于图形化程序设计，实际当然不是这样。
 * <p>
 * 在"几何形状"这个例子中，有一个基类Shape,以及多个导出类一如
 * Circle、Square、Triangle等。
 * <p>
 * 这个例子之所以好用，是因为我们可以说"圆是一种几何形状"，这种说法也很容易被理解。
 * 下面的继承图展示它们之间的关系：
 */
public class Shape {
    public void draw() {
    }

    public void erase() {
    }
}
